import urllib
import xml.etree.ElementTree as ET
import os, sys,shlex, subprocess,datetime
import xml.parsers.expat
import re

var_input_data=datetime.datetime.now().time()
print (var_input_data)

Command_Line_Argument_List=sys.argv
Input_File=str(Command_Line_Argument_List[1])
Reject_File=str(Command_Line_Argument_List[2])

def strip_control_characters_data(input):
    if input:
        #import re
        # unicode invalid characters
        RE_XML_ILLEGAL = u'([\u0000-\u0008\u000b-\u000c\u000e-\u001f\ufffe-\uffff])' + \
                         u'|' + \
                         u'([%s-%s][^%s-%s])|([^%s-%s][%s-%s])|([%s-%s]$)|(^[%s-%s])' % \
                          (unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           unichr(0xd800),unichr(0xdbff),unichr(0xdc00),unichr(0xdfff),
                           )
        input = re.sub(RE_XML_ILLEGAL, "", input)
        # ascii control characters
        input =re.sub(r"[\x01-\x1F\x7F]", " ", input)
        input=input.replace(" ","\n")
        input=re.sub(r'(\n\s*)+\n', '\n',input)
        input=re.sub(r"\+"," ",input).replace(",","").replace("&","").replace("|","-").lower()
    return str(input)

Uniq_XML_TAG_List_Data=[]
Input_Config_File=open('/home/Uniq_hdr.config','rt')
Uniq_XML_TAG_List_Data=Input_Config_File.readlines()
Input_Config_File.close()
i=0
Rejcet_Record_File_Data=open(Reject_File,'wb')
Input_File_Open=open(Input_File,'rt')
#Input_File_Lines=Input_File_Open.readlines()[1: ]
Input_File_Lines=Input_File_Open.readlines()
for line in Input_File_Lines:
   i=i+1
   #print i
   Var_Line=line.rstrip('\n').split(';')
   url=Var_Line[8]
   Input_Xml=urllib.unquote(url).decode('utf8')
   xml_string_clean=strip_control_characters_data(Input_Xml)
   xml_string=xml_string_clean[1: ]
   #print xml_string
   try:
     root=ET.fromstring(xml_string)
     length_of_element=len(root)
     #print length_of_element
     xml_tag_dict={}
     xml_tag_dict['root_header']=root.tag
      #if root.tag=='log':
     if length_of_element in[1,3]:
       for child in root:
          xml_tag_dict[child.tag]=child.text
          #print child.tag,child.text
          for subchild in child:
            xml_tag_dict[subchild.tag]=subchild.text
            for supersubchild in subchild:
              #print supersubchild.tag,supersubchild.text
              xml_tag_dict[supersubchild.tag]=supersubchild.text
     else:
       for child in root:
          xml_tag_dict[child.tag]=child.text

     #print xml_tag_dict
     
     xml_tag_value_list=[]
     for line in Uniq_XML_TAG_List_Data:
       line_var=line.replace('\n','').replace("'","")
       #print line_var
       if  line_var in xml_tag_dict.keys():
           xml_tag_value_list.append(xml_tag_dict[line_var])
       else:
         Var=""
         xml_tag_value_list.append(Var)

     #print xml_tag_value_list 
     print str(Var_Line[0:8]+xml_tag_value_list).replace("[","").replace("]","").replace(",","|").replace("'","")
     
   except Exception as e:
     #print "Record:%d,XML NOT well-formed!%s" %(i,e)
     Rejcet_Record_File_Data.writelines(str(i)+":"+str(e)+"\n"+xml_string+"\n"+"________________"+"\n")
     pass
Input_File_Open.close()
Rejcet_Record_File_Data.close()

var_input_data=datetime.datetime.now().time()
print (var_input_data)
